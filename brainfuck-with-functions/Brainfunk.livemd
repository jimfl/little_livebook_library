<!-- livebook:{"file_entries":[{"name":"Tape_vs_Stack.png","type":"attachment"},{"name":"tape_vs_stack2.png","type":"attachment"}]} -->

# Brainfunk

## Brainfuck with functions

This is a version of the [Brainfuck](https://en.wikipedia.org/wiki/Brainfuck) esoteric programming language with an additional facility: the ability to pass control to a separate program, then return back to the program that made the call.

Functions are represented by a number from 1 to 255, and the operator to call the function is the caret character `^`. Caret looks at the current cell of the data tape, and transfers control to the program with that index.

Functions are defined with the `:` instruction, and are indexed starting at 1. A function
definition ends at the start of another function definition, or at `;`. At least one `;` must 
occur at the end of all of the function definitions, and the interpreter starts running code after the `;`.

Here is an example program with 3 functions that reads numbers
from the input until it encounters a 0, doubles each number and puts it on the output

```
:[-<+>]<:[>+>+<<-]>>[<<+>>-]<:>++^>+^;,[>+++^.,]
```

Taking advantage of the fact that the interpreter ignores non-instruction characters, you can prettify the program code

```
1) add: [-<+>]<
2) dup: [>+>+<<-]>>[<<+>>-]<
3) double: >++^>+^
;
,[>+++^.,]
```

### Details

The `:` instruction tells the interpreter to start skipping over instuctions until a `;` instruction, then continue executing instructions. The interpreter implementation below caches each function defininition in a table as they are read, but a different implementation could just start scanning from the start of the program upon each function call.

Upon encountering a `^` instruction, the interpeter must do the following:

* remember where to resume executing when the function call returns
* locate the code for the $n$th function, where $n$ is the value at the data pointer
* cut the tape to the left and right of the cell at the data pointer
  * this results in a left tape and a right tape, and the cell under the data pointer, which is discarded
* the data pointer is set to the rightmost cell of the left tape
* splice in a new, zero-initialized right tape
* start executing the instructions in the function code with the spliced tape
  * the right side of the tape is the working area for the function code
  * The left side of the tape, including the cell at the data pointer is the arguments for the function

When the function is done executing, the interpreter must:

* cut the tape between the cell at the data pointer and the cell to the right
  * this is not necessarily the same location as the cut was made before. It is where the function left the data pointer. This may result in additions or deletions to the tape
* set the data pointer to the rightmost cell of the left tape
* splice the *original* right hand side of the tape back onto the mutated left tape
* resume executing instructions at the instruction after the `^`

## Tape represented as two stacks

The above is much easier to think about if instead of tapes and splicing, the data operated upon by the program is represented as a pair of stacks, with the data pointer being the top of the left stack. The instructions for moving the tape left or right under the read head, `<` and `>` respectively, just pop the value off the top of one stack and push it onto the other.

Here is a tape and two stacks representation, with the highlighted cell representing the data pointer.
![](files/Tape_vs_Stack.png)
Here is the same after executing a `<` instruction, moving the data pointer to the left.
![](files/tape_vs_stack2.png)
In this representation, calling a function just means sending the left hand stack to the function program, along with an empty right-hand stack. Returning to the calling program is a no-op, because the top of the left stack now has the result, and the calling program's right hand stack is the same as it was.

```elixir
defmodule Brainfunk.Tape do
  defstruct left: [0], right: [0]

  def move_right(%{right: [head | []]} = tape) do
    %{tape | left: [head | tape.left], right: [0]}
  end

  def move_right(%{right: [head | right]} = tape) do
    %{tape | left: [head | tape.left], right: right}
  end

  def move_left(%{left: [head | []]} = tape) do
    %{tape | left: [0], right: [head | tape.right]}
  end

  def move_left(%{left: [head | left]} = tape) do
    %{tape | left: left, right: [head | tape.right]}
  end

  def increment(%{left: [255 | left]} = tape) do
    %{tape | left: [0 | left]}
  end

  def increment(%{left: [head | left]} = tape) do
    %{tape | left: [1 + head | left]}
  end

  def decrement(%{left: [0 | left]} = tape) do
    %{tape | left: [255 | left]}
  end

  def decrement(%{left: [head | left]} = tape) do
    %{tape | left: [head - 1 | left]}
  end

  def put(%{left: [_head | left]} = tape, value)
      when value >= 0 and value < 256 do
    %{tape | left: [value | left]}
  end

  def get(%{left: [head | _]}), do: head

  def zero?(%{left: [0 | _]}), do: true
  def zero?(_), do: false
end
```

## A BrainFunk Program and Interpreter

A running Brainfunk program needs to keep track of

* the instructions to be executed
* the tape
* an optional input stream
* an optional output stream
* a function table
* a call stack

For our purposes, this will all be stored in a struct, and the interpreter will consist of functions that operate on that struct. When a function is called, a new struct will be created populated with the apropriate information, with shallow copies from the currently running process as needed. The call stack will be implicit, due to the way the `run()` function executes the function calls.

```elixir
defmodule Brainfunk.Program do
  defstruct code: "",
            tape: %Brainfunk.Tape{},
            input: [],
            output: [],
            call_table: %{},
            loop_counter: [],
            loop_limit: 10000

  alias Brainfunk.Tape
  alias Brainfunk.Program

  # Allow passing in just the string of a brainfuck program and optional input
  # and returning only the output

  @doc """
  Take a brainfuck program as a string, with optional input list, and return
  the output list.
  """
  def run_string(code, input \\ []) when is_binary(code) do
    with {:ok, program} <- %Program{code: code, input: input} |> run do
      {:ok, program.output |> Enum.reverse()}
    else
      {:error, reason, pgm} -> {:error, reason, pgm}
    end
  end

  @doc """
  Take a `%Program{}` struct and return the program state after running.
  """
  def run(program)

  # If there are no more instructions, return the program
  def run(%{code: ""} = pgm), do: {:ok, pgm}

  # Propagate errors
  def run({:error, _, _} = result), do: result

  def run(%{code: "<" <> rest} = pgm) do
    %{pgm | code: rest, tape: pgm.tape |> Tape.move_left()}
    |> run()
  end

  def run(%{code: ">" <> rest} = pgm) do
    %{pgm | code: rest, tape: pgm.tape |> Tape.move_right()}
    |> run()
  end

  def run(%{code: "+" <> rest} = pgm) do
    %{pgm | code: rest, tape: pgm.tape |> Tape.increment()}
    |> run()
  end

  def run(%{code: "-" <> rest} = pgm) do
    %{pgm | code: rest, tape: pgm.tape |> Tape.decrement()}
    |> run()
  end

  def run(%{code: "." <> rest} = pgm) do
    %{pgm | code: rest, output: [Tape.get(pgm.tape) | pgm.output]}
    |> run()
  end

  def run(%{code: "," <> rest, input: []} = pgm) do
    %{pgm | code: rest, tape: pgm.tape |> Tape.put(0)}
    |> run()
  end

  def run(%{code: "," <> rest, input: [next | rest_in]} = pgm) do
    %{pgm | code: rest, tape: pgm.tape |> Tape.put(next), input: rest_in} |> run()
  end

  def run(%{code: "^" <> rest} = caller) do
    function_index = caller.tape |> Tape.get()

    with {:ok, function} <- caller |> jump(function_index) do
      %{
        caller
        | code: rest,
          tape: %{caller.tape | left: function.tape.left},
          output: function.output,
          input: function.input
      }
      |> run()
    end
  end

  # Upon encountering a `[` instruction, split the code into the
  # code inside the loop, and everything after the matching `]`, then 
  # call loop() on the first part, and run() on the second part
  def run(%{code: "[" <> rest, loop_counter: ctr_stack} = pgm) do
    {loop_code, after_loop_code} = snip_loop(rest)

    with {:ok, pgm} <- loop(%{pgm | code: loop_code, loop_counter: [0 | ctr_stack]}) do
      run(%{pgm | code: after_loop_code})
    else
      {:error, reason, pgm} -> {:error, reason, pgm}
    end
  end

  # parse inline functions as the program is read. function definitions start with ':'
  # and end with either the start of another function ':', or ';'. At least one 
  # ';' is needed before the main program. This can be combined with comments as faux
  # labels (only for human readers) like so:
  #
  #    add: [-<+>]<
  #    dup: [>+>+<<-]>>[<<+>>-]<
  #    double: >++^>+^;
  #    ,[>+++^.,]
  #

  def run(%{code: ":" <> rest} = pgm) do
    {function, rest} = rest |> snip_function()

    %{pgm | code: rest}
    |> add_function(function |> purify_code)
    |> run()
  end

  # Ignore non-program tokens. This allows for whitespace and comments
  def run(%{code: <<_::8, rest::binary>>} = pgm) do
    run(%{pgm | code: rest})
  end

  # return an error if the loop iteration count exceeds the limit
  # The loop counter is a stack, with the counter at the top being for the 
  # current loop
  def loop(%{loop_counter: [ctr | _], loop_limit: lim} = pgm) when ctr > lim do
    {:error, "exceeded loop limit", pgm}
  end

  # just return if the current cell is zero
  def loop(%{tape: %{left: [0 | _]}, loop_counter: [_ | outer]} = pgm) do
    {:ok, %{pgm | loop_counter: outer}}
  end

  def loop(%{code: code, loop_counter: [ctr | outer]} = pgm) do
    with {:ok, pgm} <- run(%{pgm | loop_counter: [1 + ctr | outer]}) do
      loop(%{pgm | code: code})
    else
      {:error, reason, pgm} -> {:error, reason, pgm}
    end
  end

  @doc """
  snip_loop(), given the a sequence starting with the character after an opening
  leep delimiter, will return a tuple with the outer loop, and the code after 
  the loop. 

  For example, given `"+++>>>[--->>>>]+>+>+>].>.>.>"`, this function will
  return `{"++>>>[--->>>>]+>+>+>", ".>.>.>"}`
  """
  def snip_loop(string), do: snip_loop(string, "", 0)

  def snip_loop("]" <> rest, inside, 0) do
    {inside, rest}
  end

  def snip_loop("", inside, _level), do: {inside, ""}

  def snip_loop("]" <> rest, inside, level) do
    snip_loop(rest, inside <> "]", level - 1)
  end

  def snip_loop("[" <> rest, inside, level) do
    snip_loop(rest, inside <> "[", 1 + level)
  end

  def snip_loop(<<first::8, rest::binary>>, inside, level) do
    snip_loop(rest, inside <> <<first>>, level)
  end

  def jump(caller, program_index) when is_number(program_index) do
    with {code, data} <- caller.call_table[program_index] do
      jump(caller, {code, data})
    else
      code when is_binary(code) -> jump(caller, {code, [0]})
      _ -> {:error, "No entry in function table at #{program_index}", caller}
    end
  end

  def jump(caller, {code, data}) do
    [_ | args] = caller.tape.left
    %{caller | code: code, tape: %Tape{left: args, right: data}} |> run()
  end

  def snip_function(string), do: snip_function(string, "")

  def snip_function(":" <> rest, inside) do
    {inside, ":" <> rest}
  end

  def snip_function(";" <> rest, inside) do
    {inside, rest}
  end

  def snip_function(<<first::8, rest::binary>>, inside) do
    snip_function(rest, inside <> <<first>>)
  end

  def add_function(pgm, code) do
    index =
      1 +
        (pgm.call_table
         |> Map.keys()
         |> then(fn
           [] -> 0
           x -> Enum.max(x)
         end))

    cond do
      index > 255 ->
        {:error, "More than 255 functions defined", pgm}

      true ->
        %{pgm | call_table: pgm.call_table |> Map.put(index, code)}
    end
  end

  def purify_code(code, acc \\ "")

  def purify_code("", acc), do: acc

  def purify_code(<<char::8, rest::binary>>, acc) do
    cond do
      Enum.member?([?+, ?,, ?-, ?., ?<, ?>, ?[, ?], ?^], char) ->
        purify_code(rest, acc <> <<char>>)

      true ->
        purify_code(rest, acc)
    end
  end

  def print_output(program), do: program.output |> Enum.reverse() |> IO.puts()
end
```

First let's make sure we can run a standard brainfuck program.

```elixir
"""
++++++++               Set Cell #0 to 8
[
    >++++               Add 4 to Cell #1; this will always set Cell #1 to 4
    [                   as the cell will be cleared by the loop
        >++             Add 2 to Cell #2
        >+++            Add 3 to Cell #3
        >+++            Add 3 to Cell #4
        >+              Add 1 to Cell #5
        <<<<-           Decrement the loop counter in Cell #1
    ]                   Loop until Cell #1 is zero; number of iterations is 4
    >+                  Add 1 to Cell #2
    >+                  Add 1 to Cell #3
    >-                  Subtract 1 from Cell #4
    >>+                 Add 1 to Cell #6
    [<]                 Move back to the first zero cell you find; this will
                        be Cell #1 which was cleared by the previous loop
    <-                  Decrement the loop Counter in Cell #0
]                       Loop until Cell #0 is zero; number of iterations is 8

The result of this is
Cell no    0   1   2   3   4   5   6
Contents   0   0  72 104  88  32   8

>>.                     Cell #2 has value 72 which is 'H'
>---.                   Subtract 3 from Cell #3 to get 101 which is 'e'
+++++++..+++.           Likewise for 'llo' from Cell #3
>>.                     Cell #5 is 32 for the space
<-.                     Subtract 1 from Cell #4 for 87 to give a 'W'
<.                      Cell #3 was set to 'o' from the end of 'Hello'
+++.------.--------.    Cell #3 for 'rl' and 'd'
>>+.                    Add 1 to Cell #5 gives us an exclamation point
>++.                    And finally a newline from Cell #6
"""
|> Brainfunk.Program.run_string()
```

Now let's run something with functions

```elixir
code = """
  1 add: [-<+>]<
  2 dup: [>+>+<<-]>>[<<+>>-]<
  3 dbl: >++^>+^
  ;
  ,[>+++^.,]
"""

with {:ok, %{output: result} = pgm} <-
       %Brainfunk.Program{
         code: code,
         input: [123, 8, 17, 0]
       }
       |> Brainfunk.Program.run() do
  {:ok, result |> Enum.reverse(), pgm}
end
```
