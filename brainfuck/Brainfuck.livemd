# Brainfuck

## About

Brainfuck is an estoteric programming language, or esolang, designed to emulate a Turing machine. The language has only 8 instructions, which operate on data in the form of a "tape" of cells which contain an 8 bit quantity (which can represent a number 0-255 or an ASCII character). One cell is considered to be under a "read/write head" (also called the data pointer, or current cell) at any given time.

The instructions are `<`, `>`, which shift the tape under the read/write head one cell to the left or right, `+`, `-`, which increment or decrement the value under the head, `.`, `,`, which read or write the current cell, and `[`, `]` which are delimiters that provide for simple loops.
The code inside the brackets will be executed if the current cell contains a non-zero value, otherwise, it will be skipped.

## The Tape

Brainfuck progams operate on an array of cells that extends in both directions, conceptually, forever. This is called the "tape." Some brainfuck implementations just use an in-memory array to represent the tape, with the obvious limitation that you have to decide in advance how big a tape you think you need, and where to place the head on the tape so that it doesn't run off one side or the other.

Another representation of the tape is as two stacks, one stack representing the left side of the tape, and the other stack representing the current cell and the right side of the tape. This way, the tape can grow as needed, and no pre-allocation is required.

```elixir
defmodule Brainfuck.Tape do
  defstruct left: [0], right: [0, 0]

  def move_right(%{right: [head | []]} = tape) do
    move_right(%{tape | right: [head | [0]]})
  end

  def move_right(%{left: left, right: [head | right]} = tape) do
    %{tape | left: [head | left], right: right}
  end

  def move_left(%{left: [head | []]} = tape) do
    move_left(%{tape | left: [head | [0]]})
  end

  def move_left(%{left: [head | left], right: right} = tape) do
    %{tape | left: left, right: [head | right]}
  end

  def increment(%{right: [255 | right]} = tape) do
    %{tape | right: [0 | right]}
  end

  def increment(%{right: [head | right]} = tape) do
    %{tape | right: [1 + head | right]}
  end

  def decrement(%{right: [0 | right]} = tape) do
    %{tape | right: [255 | right]}
  end

  def decrement(%{right: [head | right]} = tape) do
    %{tape | right: [head - 1 | right]}
  end

  def put(%{right: [_head | right]} = tape, value)
      when value >= 0 and value < 256 do
    %{tape | right: [value | right]}
  end

  def get(%{right: [head | _]}), do: head

  def zero?(%{right: [0 | _]}), do: true
  def zero?(_), do: false
end
```

<!-- livebook:{"output":true} -->

```
{:module, Brainfuck.Tape, <<70, 79, 82, 49, 0, 0, 16, ...>>, {:zero?, 1}}
```

## The Program

A brainfuck program is just a sequence of the characters `<>+-[].,`. It is intended that occurrences of `[`, and `]` be balanced, but since one potential use of this interpreter is to run on randomly-generated programs, any unmatched occurrence of `[` is assumed to be closed by the end of the program. Any unmatched occurrence of `]` is ignored.

However, if programs are cut apart and re-mixed (as in genetic programming), latent loops have the potential to become actual loops and vice-versa, through introduction or elision of delimiters.

This implementation also has protection against infinite loops. If an individual loop iterates more than a specified amount, the program terminates with an error.

If an `input:` list is supplied with the program, then the `,` instruction will take these bytes as input (otherwise, `,` sets the current cell to 0). Similarly, output is prepended to the `output:` field (and will need to be reversed when the program terminates).

```elixir
defmodule Brainfuck.Program do
  defstruct code: "",
            tape: %Brainfuck.Tape{},
            input: [],
            output: [],
            loop_counter: [],
            loop_limit: 10000

  alias Brainfuck.Tape

  @movl ?<
  @movr ?>
  @incr ?+
  @decr ?-
  @read ?.
  @wrt ?,
  @loop ?[
  @pool ?]

  def run(code) when is_binary(code) do
    with {:ok, %{output: output}} <- %Brainfuck.Program{code: code} |> run do
      Enum.reverse(output)
    else
      {:error, reason, pgm} -> {:error, reason, pgm}
    end
  end

  # If there are no more inxtructions, then return the program
  def run(%{code: <<>>} = pgm), do: {:ok, pgm}

  def run({:error, _, _} = result), do: result

  def run(%{code: <<@movl, rest::binary>>, tape: tape} = pgm) do
    run(%{pgm | code: rest, tape: tape |> Tape.move_left()})
  end

  def run(%{code: <<@movr, rest::binary>>, tape: tape} = pgm) do
    run(%{pgm | code: rest, tape: tape |> Tape.move_right()})
  end

  def run(%{code: <<@incr, rest::binary>>, tape: tape} = pgm) do
    run(%{pgm | code: rest, tape: tape |> Tape.increment()})
  end

  def run(%{code: <<@decr, rest::binary>>, tape: tape} = pgm) do
    run(%{pgm | code: rest, tape: tape |> Tape.decrement()})
  end

  def run(%{code: <<@read, rest::binary>>, tape: tape, output: output} = pgm) do
    run(%{pgm | code: rest, output: [Tape.get(tape) | output]})
  end

  def run(%{code: <<@wrt, rest::binary>>, tape: tape, input: []} = pgm) do
    run(%{pgm | code: rest, tape: tape |> Tape.put(0)})
  end

  def run(%{code: <<@wrt, rest::binary>>, tape: tape, input: [next | rest_in]} = pgm) do
    run(%{pgm | code: rest, tape: tape |> Tape.put(next), input: rest_in})
  end

  # Upon encountering a `[` instruction, split the code into the
  # code inside the loop, and everything after the matching `]`, then 
  # call loop() on the first part, and run() on the second part
  def run(%{code: <<@loop, rest::binary>>, loop_counter: ctr_stack} = pgm) do
    {loop_code, after_loop_code} = snip_loop(rest)

    with {:ok, pgm} <- loop(%{pgm | code: loop_code, loop_counter: [0 | ctr_stack]}) do
      run(%{pgm | code: after_loop_code})
    else
      {:error, reason, pgm} -> {:error, reason, pgm}
    end
  end

  # Ignore non-program tokens. This allows for whitespace and comments
  def run(%{code: <<_::8, rest::binary>>} = pgm) do
    run(%{pgm | code: rest})
  end

  # return an error if the loop iteration count exceeds the limit
  # The loop counter is a stack, with the counter at the top being for the 
  # current loop
  def loop(%{loop_counter: [ctr | _], loop_limit: lim} = pgm) when ctr > lim do
    {:error, "exceeded loop limit", pgm}
  end

  # just return if the current cell is zero
  def loop(%{tape: %{right: [0 | _]}, loop_counter: [_ | outer]} = pgm) do
    {:ok, %{pgm | loop_counter: outer}}
  end

  def loop(%{code: code, loop_counter: [ctr | outer]} = pgm) do
    with {:ok, pgm} <- run(%{pgm | loop_counter: [1 + ctr | outer]}) do
      loop(%{pgm | code: code})
    else
      {:error, reason, pgm} -> {:error, reason, pgm}
    end
  end

  @doc """
  snip_loop(), given the a sequence starting with the character after an opening
  leep delimiter, will return a tuple with the outer loop, and the code after 
  the loop. 

  For example, given `"+++>>>[--->>>>]+>+>+>].>.>.>"`, this function will
  return `{"++>>>[--->>>>]+>+>+>", ".>.>.>"}`
  """
  def snip_loop(string), do: snip_loop(string, "", 0)

  def snip_loop(<<@pool, rest::binary>>, inside, 0) do
    {inside, rest}
  end

  def snip_loop(<<>>, inside, _level), do: {inside, ""}

  def snip_loop(<<@pool, rest::binary>>, inside, level) do
    snip_loop(rest, inside <> <<@pool>>, level - 1)
  end

  def snip_loop(<<@loop, rest::binary>>, inside, level) do
    snip_loop(rest, inside <> <<@loop>>, 1 + level)
  end

  def snip_loop(<<first::8, rest::binary>>, inside, level) do
    snip_loop(rest, inside <> <<first>>, level)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Brainfuck.Program, <<70, 79, 82, 49, 0, 0, 24, ...>>, {:snip_loop, 3}}
```

```elixir
"+[[>+]]" |> Brainfuck.Program.run()
```

<!-- livebook:{"output":true} -->

```
{:error, "exceeded loop limit",
 %Brainfuck.Program{
   code: ">+",
   tape: %Brainfuck.Tape{
     left: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...],
     right: [1]
   },
   input: [],
   output: [],
   loop_counter: [10001, 1],
   loop_limit: 10000
 }}
```

## Hello World

Here is the annotated version of Hello World from the Wikipedia page on brainfuck.

```elixir
"""
++++++++               Set Cell #0 to 8
[
    >++++               Add 4 to Cell #1; this will always set Cell #1 to 4
    [                   as the cell will be cleared by the loop
        >++             Add 2 to Cell #2
        >+++            Add 3 to Cell #3
        >+++            Add 3 to Cell #4
        >+              Add 1 to Cell #5
        <<<<-           Decrement the loop counter in Cell #1
    ]                   Loop until Cell #1 is zero; number of iterations is 4
    >+                  Add 1 to Cell #2
    >+                  Add 1 to Cell #3
    >-                  Subtract 1 from Cell #4
    >>+                 Add 1 to Cell #6
    [<]                 Move back to the first zero cell you find; this will
                        be Cell #1 which was cleared by the previous loop
    <-                  Decrement the loop Counter in Cell #0
]                       Loop until Cell #0 is zero; number of iterations is 8

The result of this is:
Cell no :   0   1   2   3   4   5   6
Contents:   0   0  72 104  88  32   8
Pointer :   ^

>>.                     Cell #2 has value 72 which is 'H'
>---.                   Subtract 3 from Cell #3 to get 101 which is 'e'
+++++++..+++.           Likewise for 'llo' from Cell #3
>>.                     Cell #5 is 32 for the space
<-.                     Subtract 1 from Cell #4 for 87 to give a 'W'
<.                      Cell #3 was set to 'o' from the end of 'Hello'
+++.------.--------.    Cell #3 for 'rl' and 'd'
>>+.                    Add 1 to Cell #5 gives us an exclamation point
>++.                    And finally a newline from Cell #6
"""
|> Brainfuck.Program.run()
```

<!-- livebook:{"output":true} -->

```
'Hello World!\n'
```


