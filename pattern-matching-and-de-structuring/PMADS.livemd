# Pattern Matching in Elixir

```elixir
Mix.install([
  # One of the examples makes some HTTP requests
  {:httpoison, "~> 2.1"}
])
```

## Elixir Pattern-matching and Variable Binding

One of the features of Elixir I find most powerful is the combination of pattern-matching and de-structuring assignments, especially within function parameters.

If you're not familiar with these concepts, let's review them. Pattern-matching and de-structuring assignments are very often used together in Elixir. Binding variables to values in Elixir is a side-effect of pattern matching. So, the `=` operator isn't the "assignment operator," it is the "pattern matching operator."

A simple "assignment" like `a = 12` is actually a trivial pattern match with the side effect of binding the variable `a` to the value `12`. You can use pattern matches with arbirarily complex nested terms, like `{_, var} = {1, 12}` or `%{foo: 7, bar: var} = %{foo: 7, bar: 12}` with `var` being bound to the value 12 in both cases.

Here is an example of pattern matching with lists. Remember that the notation `[head | list]` results in prepending the value `head` to the list `list` to obtain a new list. If `[first | rest]` appears on the left-hand side of a pattern match, the result is to bind `first` to the first value in the list, and the rest of the list to `rest`, like so:

```elixir
[first | rest] = [1, 2, 3, 4, 5]
IO.inspect(first)
IO.inspect(rest)
:ok
```

<!-- livebook:{"output":true} -->

```
1
[2, 3, 4, 5]
```

<!-- livebook:{"output":true} -->

```
:ok
```

Another common pattern in Elixir is for functions to return a tuple with a status and a value. In order to get the value, you pattern match on the specific status you want using a concrete value, like `:ok`, and a variable to be bound with the second element in the tuple.

```elixir
# Here's a toy function that returns a status/value tuple
my_fun = fn x, y -> {:ok, x + y} end

# evaluate my_fun and extract the value from the response
{:ok, value} = my_fun.(3, 4)
value

```

<!-- livebook:{"output":true} -->

```
7
```

One downside of this approach, for developers who aren't used to the pattern, is that what seems like a simple "assignment" can crash your program.

```elixir
my_fun = fn x, y -> {:kthx, x + y} end

{:ok, value} = my_fun.(3, 4)
```

The `with` macro allows for graceful coding mitigate situations where your pattern might not match. `with` also does pattern matching, but with a little different syntax. Remember that `_` matches any value.

```elixir
my_fun = fn x, y -> {:kthx, x + y} end

with {:ok, value} <- my_fun.(3, 4) do
  value
else
  {_, value} -> value
end
```

<!-- livebook:{"output":true} -->

```
7
```

Combining pattern matching with function definitions can make for code that is much easier to understand and maintain. Below is a recursive function to reduce a list to the sum of its values. The `sum_list` function takes a list and an accumulator to keep track of the running sum.

```elixir
defmodule Example.One do
  def sum_list(list, sum \\ 0)

  def sum_list([], sum), do: sum

  def sum_list([first | rest], sum) do
    sum_list(rest, sum + first)
  end
end

Example.One.sum_list([1, 3, 5, 7, 11])
```

<!-- livebook:{"output":true} -->

```
27
```

The `Example.One` module contains three definitions of the same function. Really there are only two. The first is the **function head**, which is optional, but allows us to specify that the second parameter is optional, and is zero by default. `sum_list` is a function of two arguments, but Elixir uses the function head to create a single argument version that passes the default second argument to the two-arity version of the function.

Having a 1-arity version of the functions alows us to pass it in easily to other functions, like so

```elixir
[[1,2,3], [4,5,6]]
|> Enum.map(&Example.One.sum_list/1)
```

<!-- livebook:{"output":true} -->

```
[6, 15]
```

The second definition of `sum_list` is the pathological case, where we pass in an empty list, in which case, it just returns the sum. This is also the base case for recursion.

The third definition is where all the work happens. The pattern match in the function arguments splits the list into `first` which is bound to the head of the list, and `rest` which is bound to the tail. These are used to create the parameters for the recursive call.

Programs in other languages generally take a different approach, that might look something like this. (I had to look up the `if` macro in Elixir). What follows is very non idiomatic Elixir. This also might be a bad idea in your language of choice if it dosn't support tail-call optimization.

```elixir
defmodule Example.One.Traditional do
  def sum_list(list, sum \\ 0) do
    if Enum.count(list) < 1 do
      sum
    else
      first = List.first(list)
      rest = List.delete_at(list, 0)
      sum_list(rest, sum + first)
    end
  end
end

Example.One.Traditional.sum_list([2, 3, 5, 7, 11])
```

<!-- livebook:{"output":true} -->

```
28
```

Notice that in the `Example.One.sum_list` version, there are no `if` statements or explicit assignments to temporary variables. This is all handled by the language itself. The Elixir dispatcher decides which version of the function to evaluate based on pattern-matching, and the de-structuring performs the assignments. The body of the function merely re-structures the arguments for the recursive call.

In terms of readability and maintainability, these two simple examples aren't that different. In fact the traditional version might be simpler to follow for many readers who haven't adjusted to the pattern-matching and de-structuring approach. However, in more involved coding situations, the power of pattern-matching and de-structuring becomes apparent.

If you have ever tried to write code that merely fetches some information from an HTTP server, you know that all the little corner cases, retries, redirects, etc. can make for a convoluted looping, conditional hairball. Here's how you might do it in Elixir (pretending, for those who are aware, that the `HTTPoison` module doesn't do some of these things for you, and pretending that there's only one HTTP code each for success, not-found, re-direct, and server-failure).

To preserve my own sanity, I am *not* going to provide a if-statement-based implementation of a traditional HTTP request loop that does retry and re-direction.

```elixir
defmodule HTTPUtil do
  require HTTPoison

  alias HTTPoison.Response

  @default_content "__BUPKES__"
  @wait_unit_in_millis 250
  @max_retries 3

  defp back_off_and_retry(url, retries_left) do
    this_many_wait_units = 1 + @max_retries - retries_left
    # EXERCISE FOR THE READER: Add jitter 
    # see https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/
    Process.sleep(this_many_wait_units * @wait_unit_in_millis)
    url |> get_content_from_url(retries_left - 1)
  end

  def get_content_from_url(url, retries_left \\ @max_retries)

  def get_content_from_url(_url, 0 = _retries_left), do: @default_content

  def get_content_from_url(url, retries_left) when is_binary(url) do
    with {:ok, response} <- HTTPoison.get(url) do
      get_content_from_response(response, retries_left)
    else
      {:error, _} -> url |> back_off_and_retry(retries_left)
    end
  end

  def get_content_from_response(%Response{status_code: 200, body: content}, _) do
    content
  end

  def get_content_from_response(%Response{status_code: 404}, _) do
    @default_content
  end

  def get_content_from_response(%Response{status_code: 500, request_url: url}, retries_left) do
    url |> back_off_and_retry(retries_left)
  end

  def get_content_from_response(%Response{status_code: 302} = response, _) do
    response
    |> get_redirect_url_from_response()
    |> get_content_from_url()
  end

  def get_redirect_url_from_response(%Response{headers: headers}) do
    headers |> find_location_header()
  end

  def find_location_header([{"location", location} | _]) do
    location
  end

  def find_location_header([_ | rest]) do
    rest |> find_location_header()
  end


end
```

<!-- livebook:{"output":true} -->

```
{:module, HTTPUtil, <<70, 79, 82, 49, 0, 0, 14, ...>>, {:find_location_header, 1}}
```

In this example, `get_content_from_response()` does pattern-matching on Elixir structs (the `HTTPoison.Response` struct), matching on the status to decide whether to return the content, retry, redirect, or fail (returning the string `__BUPKES__`).

It is important to note that the two definitions of `find_location_header()` need to be in the order they're in, because Elixir dispatches the function by applying the pattern-match in order of definition, so the second definition would match on the `Location:` header and skip right over it.

The retry policy is encoded in the combination of the `retries_left` parameter in `get_content_*` and the `sleep` in the function definition that matches on status code 500.

A benefit of splitting the functions up like this is that only function difinitions that need to deal with back-off and retries need to have the code that calculates the backoff time.

If you wanted to support more than one HTTP status code per function definition, you could use a guard in combination with the pattern-matching, like so:

<!-- livebook:{"force_markdown":true} -->

```elixir
def get_content_from_response(%Response{status_code: code, request_url: url}, retries_left)
    when code >= 500 do
  Process.sleep((4 - retries_left) * 1000)
  get_content_from_url(url, retries_left - 1)
end
```

We can smoke test `HTTPUtil` on a URL that will do a redirect:

```elixir
HTTPUtil.get_content_from_url("https://flip.it/VIDXwy")
```

<!-- livebook:{"output":true} -->

```
"<!DOCTYPE html>\n<html lang=\"en-US\"   xmlns:og=\"http://ogp.me/ns#\" xmlns:fb=\"http://www.facebook.com/2008/fbml\">\n<head>\n\t<meta charset=\"UTF-8\" />\n\t<meta name=\"HandheldFriendly\" content=\"True\">\n\t<meta name=\"MobileOptimized\" content=\"320\">\n\t<meta name=\"viewport\" content=\"initial-scale=1.0, width=device-width, minimum-scale=1.0, user-scalable=1\" />\n\t<link rel=\"profile\" href=\"http://gmpg.org/xfn/11\" />\n\t<link rel=\"pingback\" href=\"https://robbreport.com/xmlrpc.php\" />\n\t<meta property=\"fb:app_id\" content=\"445395315547478\" />\n\t\n<!--\n\t\t _     _ _           ____          _          _____ _    ___\n\t\t| |   (_) | _____   / ___|___   __| | ___    | ____| |__|__ \\\n\t\t| |   | | |/ / _ \\ | |   / _ \\ / _` |/ _ \\   |  _| | '_ \\ / /\n\t\t| |___| |   <  __/ | |__| (_) | (_| |  __/_  | |___| | | |_|\n\t\t|_____|_|_|\\_\\___|  \\____\\___/ \\__,_|\\___( ) |_____|_| |_(_)\n\t\t\t\t\t\t\t\t\t\t\t\t  |/\n\n\t\t Work on Robb Report and other iconic brands!\n\n\t\t Visit our careers page at https://pmc.com/careers/\n\n-->\n\n<meta name=\"description\" content=\"Made with Cynar, Toki Japanese whisky and a pineapple-infused rum, this original cocktail is a tropical variation on the Manhattan with a bitter note.\" />\n<title>Bitter Tears Recipe: How to Make the Rum-Filled Manhattan Variation</title>\n\t\t<script type=\"text/javascript\">\n\t\t\twindow.dataLayer = window.dataLayer || [];\n\t\t\tfunction gtag(){dataLayer.push(arguments);}\n\n\t\t\twindow.pmc_google_consent_mode = {\n\t\t\t\tinit: function(opts = {}) {\n\t\t\t\t\t/** @type string[] */\n\t\t\t\t\tconst consentGroups = window.pmc_onetrust_helpers?.getActiveConsentGroups?.() || [];\n\n\t\t\t\t\t/**\n\t\t\t\t\t * C0001 = Strictly Necessary Cookies (Security, Auth, Basic Functionality)\n\t\t\t\t\t * C0002 = Performance Cookies (Analytics)\n\t\t\t\t\t * C0003 = Functional Cookies (Personalization)\n\t\t\t\t\t * C0004 = Targeting Cookies (Advertising)\n\t\t\t\t\t */\n\t\t\t\t\tconst configuration = {\n\t\t\t\t\t\t'ad_storage': consentGroups.includes('C0004') ? 'granted' : 'denied',\n\t\t\t\t\t\t'analytics_storage': consentGroups.includes('C0002') ? 'granted' : 'denied',\n\t\t\t\t\t\t'functionality_storage': consentGroups.includes('C0003') ? 'granted' : 'denied',\n\t\t\t\t\t\t'personalization_storage': consentGroups.includes('C0003') ? 'granted' : 'denied',\n\t\t\t\t\t\t'security_storage': consentGroups.includes('C0001') ? 'granted' : 'denied',\n\t\t\t\t\t}\n\n\t\t\t\t\tif (opts.isUpdate === true && consentGroups.length === 0) {\n\t\t\t\t\t\tconfiguration['wait_for_update'] = 1500;\n\t\t\t\t\t}\n\n\t\t\t\t\tgtag('consent', opts.isUpdate ? 'update' : 'default', configuration);\n\t\t\t\t},\n\t\t\t\tupdate: function() {\n\t\t\t\t\tthis.init({ isUpdate: true });\n\t\t\t\t},\n\t\t\t}\n\t\t\twindow.pmc_google_consent_mode.init();\n\t\t</script>\n\t\t<script type=\"text/javascript\">\n/* <![CDATA[ */\nvar pmc_meta = {\"lob\":\"robbreport\",\"lob_genre\":\"Lifestyle\",\"page-type\":\"article\",\"env\":\"desktop\",\"primary-category\":\"Food & Drink\",\"primary-vertical\":\"\",\"vertical\":\"\",\"category\":[\"Food &amp; Drink\",\"Spirits\"],\"tag\":[\"Cocktail Recipe\",\"Cocktails\",\"Japanese whisky\",\"Rum\"],\"author\":[\"Jason O'Bryan\"],\"logged-in\":\"\",\"subscriber-type\":\"\",\"country\":\"us\",\"is_eu\":false,\"post-options\":\"\"};\n\n/* ]]> */\n</script>\n\t\t<script type=\"text/plain\" class=\"optanon-category-C0002\">\n\t\t\t(function(d,w){\n\t\t\t\tvar i, parts, name, c, rdecode = /(%[0-9A-Z]{2})+/g, rspace = /\\+/g, ac = (d ? d.split('; ') : []);\n\t\t\t\tfor(w.pmc_cookies = {}, i = 0; i < ac.length; i++) {\n\t\t\t\t\tparts = ac[i].split('='), name = parts[0].replace(rdecode, decodeURIComponent), c = parts.slice(1).join('=');\n\t\t\t\t\tif(c.charAt(0) === '\"') { c = c.slice(1, -1); } c = c.replace(rdecode, decodeURIComponent).replace(rspace, ' '); w['pmc_cookies'][name] = c;\n\t\t\t\t}\n\t\t\t})(document.cookie, window);\n\n\t\t\tpmc_meta=pmc_meta || {}, pmc_meta.omni_visit_id = window.pmc_cookies.omni_visit_id || \"robbreport.\" + new Date().getTime() + '.' + (function(l,b,a,c,i,d){for(i=0;i<256;i++){l[i]=(i<16?'0':'')+(i).toString(16);}if(c&&c.getRandomValues){try{d=new Uint32Array(4),c.getRandomValues(d);}catch(e){d=0;}}d=d||[b()*a>>>0,b()*a>>>0,b()*a>>>0,b()*a>>>0];a=d[0],b=d[1],c=d[2],d=d[3];return l[a&0xff]+l[a>>8&0xff]+l[a>>16&0xff]+l[a>>24&0xff]+'-'+l[b&0xff]+l[b>>8&0xff]+'-'+l[b>>16&0x0f|0x40]+l[b>>24&0xff]+'-'+l[c&0x3" <> ...
```
